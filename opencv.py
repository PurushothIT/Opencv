# -*- coding: utf-8 -*-
"""opencv.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M5A6bZB_dHI9u-jd31MI-Tj-pfoz_7zt
"""

]pip install opencv-python

import cv2
print(cv2.__version__)

import cv2
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/sample_data/bmw2.jpg')
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()

import cv2
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/sample_data/img1.jpg')
cv2_imshow(image)
hight, widht, channel=image.shape
print('hight=', hight ,'channel=', channel ,'width=', widht)

from google.colab import drive
drive.mount('/content/sample_data/img1.jpg')

image_size=image.size
print('image_size=', image_size)

resized_image=cv2.resize(image, (600, 300))
cv2_imshow(resized_image)

gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray)

hsv=cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
cv2_imshow(hsv)

cropped=image[50:500, 100:700]
cv2_imshow(cropped)

cv2.rectangle(image, (50, 50), (200, 200), (0, 255, 0), 2)

import cv2
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/sample_data/A brand new BMW car with the name Purushoth in neon lights, set against a mountain and tree background with a blue sky.png')
cv2_imshow(image)
cv2.waitKey(0)
cv2.destroyAllWindows()

cv2.rectangle(image, (50, 500), (200, 200), (50, 255, 500), 2)
cv2_imshow(image)

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
image=cv2.imread('/content/sample_data/img1.jpg')
(h,w)=image.shape[:2]
center=(w/2, h/2)
angle=-20
scale=1.0
M=cv2.getRotationMatrix2D(center, -45, 1.0)
rotated=cv2.warpAffine(image, M, (w, h))
plt.imshow(cv2.cvtColor(rotated, cv2.COLOR_BGR2RGB))
plt.title('rotated')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
image=cv2.imread('/content/sample_data/img1.jpg')
(h,w)=image.shape[:2]
tx,ty=-2000,-3000
translation_matrix=np.float32([[1,0,tx],[0,1,ty]])
translated_image=cv2.warpAffine(image, translation_matrix, (w,h))
plt.imshow(cv2.cvtColor(translated_image, cv2.COLOR_BGR2RGB))
plt.title('translated')
plt.show()

image=cv2.imread('/content/sample_data/img3.jpg')
flipped_horizontally=cv2.flip(image, 1)
flipped_vertically=cv2.flip(image, 0)
rotated_both=cv2.flip(image, -1)
plt.subplot(2,2,1)

plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('original image')
plt.subplot(2,2,2)

plt.imshow(cv2.cvtColor(flipped_horizontally, cv2.COLOR_BGR2RGB))
plt.title('flipped horizontally')

plt.subplot(2,2,3)
plt.imshow(cv2.cvtColor(flipped_vertically,cv2.COLOR_BGR2RGB))
plt.title('flipped vertically')

plt.subplot(2,2,4)
plt.imshow(cv2.cvtColor(rotated_both,cv2.COLOR_BGR2RGB))
plt.title('flipped both')

plt.show()

plt1=np.float32([[500,500], [2000,500], [500,2000],[2000,2000]])
plt2=np.float32([[100,1000], [2000,50], [1000,2500],[2000,2000]])
(h,w)=image.shape[:2]
M = cv2.getPerspectiveTransform(plt1, plt2)
perspective =cv2.warpPerspective(image, M, (w,h))
plt.imshow(cv2.cvtColor(perspective, cv2.COLOR_BGR2RGB))
plt.title('perspective')
plt.show()

plt.subplot(2,5,1)
plt.width=50
plt.height=40
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('original image')
plt.axis('off')

plt.subplot(2,3,2)
(h,w)=image.shape[:2]
tx,ty=700,500
translation_matrix=np.float32([[1,0,tx],[0,1,ty]])
translated_image=cv2.warpAffine(image, translation_matrix, (w,h))
plt.imshow(cv2.cvtColor(translated_image, cv2.COLOR_BGR2RGB))
plt.title('translated')
plt.axis('off')

plt.subplot(2,3,3)
resized_image=cv2.resize(image, (600, 300))
plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
plt.title('Resized')
plt.axis('off')

plt.subplot(2,3,4)
(h,w)=image.shape[:2]
center=(w/2, h/2)
M=cv2.getRotationMatrix2D(center, -45, 1.0)
rotated=cv2.warpAffine(image, M, (w, h))
plt.imshow(cv2.cvtColor(rotated, cv2.COLOR_BGR2RGB))
plt.title('rotated')
plt.axis('off')

plt.subplot(2,3,5)
plt1=np.float32([[500,500], [2000,500], [500,2000],[2000,2000]])
plt2=np.float32([[100,1000], [2000,50], [1000,2500],[2000,2000]])
(h,w)=image.shape[:2]
M = cv2.getPerspectiveTransform(plt1, plt2)
perspective =cv2.warpPerspective(image, M, (w,h))
plt.imshow(cv2.cvtColor(perspective, cv2.COLOR_BGR2RGB))
plt.title('perspective')
plt.axis('off')

plt.subplot(2,3,6)
shear_matrix=np.float32([[1,0.5,0],[0.5,1,0]])
sheared_image=cv2.warpAffine(image, shear_matrix, (w,h))
plt.imshow(cv2.cvtColor(sheared_image, cv2.COLOR_BGR2RGB))
plt.title('sheared')
plt.axis('off')

plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
from google.colab.patches import cv2_imshow
from google.colab import files
from IPython.display import clear_output
import time

video_path='/content/sample_data/video.mp4'
cap=cv2.VideoCapture(video_path)
if not cap.isOpened():
  print('Error opening video file')
while True:
  ret,frame=cap.read()
  if not ret:
    break
  cv2_imshow(frame)
  clear_output(wait=True)

from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import matplotlib.pyplot as plt
img1=cv2.imread('/content/sample_data/danger.jpg')
laplacian1=cv2.Laplacian(img1,cv2.CV_64F)
cv2_imshow(laplacian1)

import cv2
from google.colab.patches import cv2_imshow
img=cv2.imread('/content/sample_data/Rose.jpg')
sobelx=cv2.Sobel(img,cv2.CV_64F,1,0,ksize=5)
cv2_imshow(sobelx)
sobely=cv2.Sobel(img,cv2.CV_64F,0,1,ksize=5)
cv2_imshow(sobely)

scharr_x=cv2.Scharr(img,cv2.CV_64F,1,0)
scharr_y=cv2.Scharr(img,cv2.CV_64F,0,1)
scharr_combined=cv2.bitwise_or(scharr_x,scharr_y)
cv2_imshow(scharr_x)
cv2_imshow(scharr_y)
cv2_imshow(scharr_combined)

import numpy as np
from google.colab.patches import cv2_imshow
img=cv2.imread('/content/sample_data/Rose.jpg')
robert_x=np.array([[1,0],[0,-1]],dtype=np.float32)
robert_y=np.array([[0,1],[-1,0]],dtype=np.float32)
edge=cv2.filter2D(img,-1,robert_x)
edge=cv2.filter2D(img,-1,robert_y)
edges=cv2.addWeighted(edge,0.5,edge,0.5,0)
cv2_imshow(edges)

img=cv2.imread('/content/sample_data/Rose.jpg')
prewit_x=np.array([[1,0,-1],[1,0,-1],[1,0,-1]],dtype=np.float32)
prewit_y=np.array([[1,1,1],[0,0,0],[-1,-1,-1]],dtype=np.float32)
edge_x=cv2.filter2D(img,-1,prewit_x)
edge_y=cv2.filter2D(img,-1,prewit_y)
edges=cv2.addWeighted(edge_x,0.5,edge_y,0.5,0)
cv2_imshow(edges)

